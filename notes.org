* Removing hooks
  Let's say I added a lambda function that is giving errors
  #+BEGIN_SRC emacs-lisp

(add-hook 'clojure-mode-hook
	    (lambda ()
	      (message "how do i remove myself??")))


clojure-mode-hook
(first clojure-mode-hook)

(remove-hook 'clojure-mode-hook (first clojure-mode-hook))
  #+END_SRC
* profiling time of each block
  + https://emacs.stackexchange.com/a/21251/19673

#+BEGIN_SRC emacs-lisp
(defmacro with-timer (title &rest forms)
  "Run the given FORMS, counting the elapsed time.
A message including the given TITLE and the corresponding elapsed
time is displayed."
  (declare (indent 1))
  (let ((nowvar (make-symbol "now"))
        (body   `(progn ,@forms)))
    `(let ((,nowvar (current-time)))
       (message "%s..." ,title)
       (prog1 ,body
         (let ((elapsed
                (float-time (time-subtract (current-time) ,nowvar))))
           (message "%s... done (%.3fs)" ,title elapsed))))))



#+END_SRC
** COMMENT playing with use-package
#+BEGIN_SRC emacs-lisp

(defalias 'use-package-old 'use-package)
(defmacro use-package (&rest forms)
  (declare (indent 1))
  (let ((nowvar (make-symbol "now"))
        (body   `(progn (use-package-old ,@forms)))
	(package (symbol-name (first forms)))
	)
    `(let ((,nowvar (current-time)))
       (message "use-package: %s..." ,package)
       (prog1 ,body
         (let ((elapsed
                (float-time (time-subtract (current-time) ,nowvar))))
           (message "%s... done (%.3fs)" ,package elapsed))))))

(macroexpand-all '(use-package-old helm))
(macroexpand-1 '(use-package2 helm))
(use-package helm)
(macroexpand-all '(with-timer "test " (+ 1 2)))
#+END_SRC
* Highlighting thing under cursor etc..
  + M-x highlight-symbol-at-point
    or add C-u prefix to select what color shall be used
  + M-x unhighlight-regexp
    to remove highlights.. gives you a list of what is already highlighted. nice!
* listing edited buffers
  see https://www.reddit.com/r/emacs/comments/6w1kqi/listing_unsaved_buffers/dm4sizy/
  + run =ibuffer=
  + run =ibuffer-filter-by-modified=
    would be nice here to only show actual files (and no \*minibuffer\* etc)
* TODO about emacs 27.1
  + tab bar (per window and per frame)
    https://www.emacswiki.org/emacs/TabBarMode
    could add button in specific buffers (per window) for certain actions?
    eg
    + in cider : addbutton for clear cider buffer
  + so-long
    https://www.emacswiki.org/emacs/SoLong
    optimization for long lines bringing emacs to its knees
* Spelling
** Windows setup
* ober eval in repl & vars
  :PROPERTIES:
  :header-args: :session *test* :var test="abc" test2="def" :dir ~/dev
  :END:

  #+BEGIN_SRC sh :dir ~/dev
pwd
  #+END_SRC

  #+RESULTS:
  |                        |
  | $ $ /home/actondev/dev |

  The problem is that upon initializing the session, $test is not defined

  This is how we can get the assignments
  #+BEGIN_SRC emacs-lisp

(org-babel-expand-body:generic
 nil
 nil
 (org-babel-variable-assignments:shell (nth 2 (org-babel-get-src-block-info))))

(org-babel-variable-assignments:shell (nth 2 (org-babel-get-src-block-info)))
  #+END_SRC


** dir
   [[file:/usr/share/emacs/26.3/lisp/org/ob-core.el.gz::(default-directory]]
   in org-babel-execute-src-block


* Header args
  https://orgmode.org/manual/Using-Header-Arguments.html

  For a subheading add
  #+BEGIN_EXAMPLE
    :PROPERTIES:
  :header-args: :session *test* :var test="abc" test2="def" :dir ~/dev
  :END:
  #+END_EXAMPLE

  for all the document

  #+BEGIN_EXAMPLE
#+PROPERTY: header-args:R  :session *R*
  #+END_EXAMPLE

  results:
  - silent
  - replace (default)
