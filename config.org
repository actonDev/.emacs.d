#+PROPERTY: header-args :results silent :tangle yes

* Some defaults
  #+BEGIN_SRC emacs-lisp
(menu-bar-mode 1) ;; show menu: useful things there some times!
(tool-bar-mode 0) ;; toolbar definetly not
(scroll-bar-mode 0) ;; hide system scrollbars

;; CUA
(cua-mode 0) ;; ctrl-c ctrl-v copy paste etc
(global-set-key (kbd "C-v") 'yank)

(global-hl-line-mode 1) ;; Highlight current line
(fset 'yes-or-no-p 'y-or-n-p)
;;(define-key cua-global-keymap [C-return] nil) ;; don't remember the use-case of this
;;(define-key cua--cua-keys-keymap [C-z] nil)
(global-visual-line-mode 1) ;; word/line wrap
(winner-mode t) ;; C-c left will undo window position changes
(setq ring-bell-function 'ignore)
(global-display-line-numbers-mode 1)
(setq inhibit-startup-screen 1)
(delete-selection-mode 1) ;; delete selected region if starting typing

;; Keeping clipboard data before replacing it with emacs copy/kill etc
(setq save-interprogram-paste-before-kill t)
  #+END_SRC

** functions
   #+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))

(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position))
  )
   #+END_SRC
** bindings
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-/") 'toggle-comment-on-line)
(global-set-key (kbd "C-?") 'comment-or-uncomment-region)

(global-set-key (kbd "M-n") 'outline-next-visible-heading)
(global-set-key (kbd "M-p") 'outline-previous-visible-heading)
   #+END_SRC

* Package source, use-package etc
  #+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")))
  #+END_SRC

** use-package
   Bootstrapping use-package
   #+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
(setq use-package-always-defer t)
(setq use-package-verbose 'verbose)
   #+END_SRC

** straight.el
   see
   + https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/
   + https://github.com/raxod502/straight.el/blob/develop/README.md#getting-started

   #+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-vc-git-default-clone-depth 1)
;; (setq straight-use-package-by-default t)
   #+END_SRC
** Custom directories
   Note: in [[file:init.el]] we defined the =relative-from-init= function.
   Here we add relative folders (from the init file) to load files from.
   + [ ] TODO add here something like a =custom= folder (which will be in gitignore)
   #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (relative-from-init "elisp"))
   #+END_SRC

* Org customizations
  #+BEGIN_SRC emacs-lisp
;; org-src-fontify-natively t
(setq org-src-preserve-indentation t)
  #+END_SRC   
** habits
  #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t))
  #+END_SRC 

  And add org-file to the list of agenda files.
  =(org-agenda-file-to-front)=
  see
  + https://orgmode.org/manual/Tracking-your-habits.html
  + https://www.youtube.com/watch?v=acj3NhXlnnk

  useful command
  + org-agenda-file-to-front
  + (setq org-log-done 'time)
** babel languages
   #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages 'org-babel-load-languages
			       '(
				 (shell . t)
				 ;;	  (python . t)
				 ;;	  (sql . t)
				 ;;	  (python . t)
				 ;;	  (restclient . t)
				 ;;	  (php . t)
				 ;;	  (clojure . t)
				 )
			       ))
   #+END_SRC

** org-babel-eval-in-repl
   #+BEGIN_SRC emacs-lisp
(use-package eval-in-repl
  ;; :ensure t
  ;; uhm.. use-package fail? i have default ensure set to true,
  ;; yet without the custom :ensure t it didn't work
  )

(use-package org-babel-eval-in-repl
  ;;  :ensure t
  :bind
  (:map org-mode-map
	("C-<return>" . ober-eval-in-repl)))
   #+END_SRC

* Helm
  #+BEGIN_SRC emacs-lisp
(use-package helm
  :bind(
	("M-x" . helm-M-x)
	("C-<tab>" . helm-mini)
	("C-x C-f" . helm-find-files)
	("C-S-v" . helm-show-kill-ring)
	:map helm-map
	("<tab>" . helm-execute-persistent-action)
	("<left>" . left-char)
	("<right>" . right-char)
	)
  :config
  (setq helm-M-x-fuzzy-match t
	helm-recentf-fuzzy-match t
	helm-apropos-fuzzy-match t
	helm-buffers-fuzzy-matching t
	helm-completion-in-region-fuzzy-match t
	helm-mode-fuzzy-match t)
  ;; disable auto input
  
  (setq helm-swoop-pre-input-function
	(lambda () nil))
  (helm-mode 1)
)

(use-package helm-swoop
  :config
  (setq helm-swoop-use-fuzzy-match nil)
  (setq helm-swoop-speed-or-color t)
  (setq helm-autoresize-max-height 35)
  (setq helm-autoresize-min-height 20)
  (setq helm-autoresize-mode 1)
  )

(use-package helm-ag)

  #+END_SRC

** installing ag (used in helm-ag)
   In ubuntu:
   #+BEGIN_SRC sh
sudo apt-get install silversearcher-ag
   #+END_SRC
* Window management
** Resizing (windresize)
   #+BEGIN_SRC emacs-lisp
(use-package windresize
  :config
  (setq windresize-default-increment 5)
  )
   #+END_SRC

** ace-window
   #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-o" . ace-window))
  :config
  (setq-default aw-scope 'frame) ; switching windows only i current frame
  )
   #+END_SRC

* Project management

** Projectile & neotree
   Useful neotree shortcuts
   + =A= : stretch toggle
   + =U= : go up to parent
   + =C-c C-a= : collapse all
     + [ ] set <S-tab> for collapse all?

   #+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :config
  (projectile-mode 1)
  ;; speed!
  (setq projectile-indexing-method 'hybrid)
  
  ;; https://github.com/bbatsov/projectile/issues/1302#issuecomment-433894379
  ;; windows fix
  ;; (setq projectile-git-submodule-command nil)
  ;; oor install tr with "choco install tr"
  ;; oor msys2 paths (see heading)
  )
(use-package helm-projectile)

(defun display-line-numbers-disable-hook (_)
  "Disable display-line-numbers locally."
  (display-line-numbers-mode -1))

(use-package neotree
  :config
  (setq neo-smart-open t)
  (add-hook 'neo-after-create-hook 'display-line-numbers-disable-hook)
  :bind(
	("<f8>" . neotree-toggle)
	)
  )
   #+END_SRC
* Appearance
** Cursor
   #+BEGIN_SRC emacs-lisp
(blink-cursor-mode t)
(setq-default cursor-type 'box)
   #+END_SRC
** Welcome screen
   #+BEGIN_SRC emacs-lisp
(use-package dashboard
  :demand t
  :diminish dashboard-mode
  :config
  ;;  (setq dashboard-banner-logo-title "your custom text")
  (setq dashboard-startup-banner 1) ;; integer is for text
  (setq dashboard-items '(
			  (projects . 10)
                          (bookmarks . 10)
			  (recents  . 10)
			  ))
  (dashboard-setup-startup-hook)
  ;; fixing emacs client starting with scratch
  ;; https://www.reddit.com/r/emacs/comments/8i2ip7/emacs_dashboard_emacsclient/
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  )
   #+END_SRC
** frame title
   For distinguishing between windows and linux (WSL in windows)
   #+BEGIN_SRC emacs-lisp
;; note: can't use for some reason directy the system-type
(setq system-type-name (symbol-name system-type))
(setq frame-title-format '("%f  -- " system-type-name))
   #+END_SRC
** COMMENT monokai
   #+BEGIN_SRC emacs-lisp
(use-package monokai-theme)
  

;; (use-package sublime-themes
;;   
;;   :config
;;   (load-theme 'spolsky t)
;;   )
   #+END_SRC
** doom
   #+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :demand t
  :config
  (load-theme 'doom-molokai t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  ;; https://github.com/domtronn/all-the-icons.el/issues/28#issuecomment-312089198
  (setq inhibit-compacting-font-caches t)
  (setq doom-themes-neotree-file-icons t)
  )
   #+END_SRC
** doom-modeline
   #+BEGIN_SRC emacs-lisp
(use-package doom-modeline
   :hook (after-init . doom-modeline-mode))
   #+END_SRC

   + [ ] TODO
     If sometimes you don't see the icons (it happens on doom-modeline reset and enable again)
   #+BEGIN_SRC emacs-lisp :tangle no
;; (setq doom-modeline-icon (display-graphic-p))
(setq doom-modeline-buffer-state-icon t)
   #+END_SRC

   Note: after you have to run =all-the-icons-install-fonts= with M-x.
*** minions: showing minor modes
    #+BEGIN_SRC emacs-lisp
(use-package minions
  :demand t
  :config
  (minions-mode 1)
  (setq doom-modeline-minor-modes (featurep 'minions)))
    #+END_SRC
** COMMENT powerline
   #+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (powerline-default-theme))
   #+END_SRC

** highlighting matching tag (show-paren)
   #+BEGIN_SRC emacs-lisp
(use-package paren
  :hook (prog-mode . show-paren-mode)
  :init
  (set-face-attribute 'show-paren-match nil
		      :box '(:line-width -1 :color "#ccc")
		      :foreground nil
		      :weight 'normal))
   #+END_SRC
* editing etc
** auto completion
   #+BEGIN_SRC emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :config
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-ignore-case t))
   #+END_SRC

** Hiding/showing blocks
   + [[file:emacs-lisp/hideshowvis.el]]
     adds clickable + - icons in the left fringe for folding/unfolding (hiding/showing) code blocks
   + [[file:emacs-lisp/hideshow-org.el]]
     adds functionality similar to org-mode: toggle code block hide/show by pressing tab
   #+BEGIN_SRC emacs-lisp
(use-package hideshow-org
  :load-path "elisp/"
  ;; :demand t
  :hook (prog-mode . hs-org/minor-mode))

(use-package hideshowvis
  :load-path "elisp/"
  ;; :demand t
  :hook (prog-mode . hideshowvis-minor-mode))
   #+END_SRC

** selection
   #+BEGIN_SRC emacs-lisp
;; usecase: select the block (enclosed by parenthesis).. expand -> wrap around the outter block
(use-package expand-region)

(use-package multiple-cursors
  :bind (("C->" . mc/mark-next-like-this-word)
	 ("C-<" . mc/mark-previous-like-this-word)
	 ( "M-<f3>" . mc/mark-all-like-this) ;; submlime like
	 ("C-S-<mouse-1>" . mc/add-cursor-on-click))
  )
   #+END_SRC
** undo
   #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  (global-undo-tree-mode 1)
  (unbind-key "C-/" undo-tree-map)
  (unbind-key "C-?" undo-tree-map)
  :bind(
	("M-/" . undo-tree-visualize)
	("C-z" . undo-tree-undo)
	("C-S-z" . undo-tree-redo)
	)
  )
   #+END_SRC
** Working with lisps
*** paredit
    #+BEGIN_SRC emacs-lisp
(use-package paredit
  ;; <C-right>	paredit-forward-slurp-sexp
  ;; <C-left>	paredit-forward-barf-sexp
  ;; <C-M-right>	paredit-backward-barf-sexp
  ;; <C-M-left>	paredit-backward-slurp-sexp  :config
  :hook ((clojure-mode emacs-lisp-mode ) . paredit-mode)
  :config
  (unbind-key "C-<right>" paredit-mode-map)
  (unbind-key "C-<left>" paredit-mode-map)
  :bind(:map paredit-mode-map
	("M-]" . paredit-forward-slurp-sexp) ;; c ->
	("M-[" . paredit-forward-barf-sexp) ;; c <-
	("M-}" . paredit-backward-barf-sexp) ;; C-M >
	("M-{" . paredit-backward-slurp-sexp) ;; C M <
	))
    #+END_SRC
    Useful tricks
    + swapping parens to brackets etc
      https://stackoverflow.com/a/24784563/8720686
*** COMMENT parinfer
    #+BEGIN_SRC emacs-lisp
(defun add-parinfer-hooks ()
  (add-hook 'clojure-mode-hook #'parinfer-mode)
  (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
  (add-hook 'common-lisp-mode-hook #'parinfer-mode)
  (add-hook 'scheme-mode-hook #'parinfer-mode)
  (add-hook 'lisp-mode-hook #'parinfer-mode))

(use-package parinfer
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(
	    defaults       ; should be included.
            ;; pretty-parens  ; different paren styles for different modes.
            ;; evil           ; If you use Evil.
            ;; lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
            
paredit        ; Introduce some paredit commands.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank
	    ))   ; Yank behavior depend on mode.
    ))
    #+END_SRC
*** aggresive indent?
    https://github.com/Malabarba/aggressive-indent-mode
    vs electric
    #+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook ((clojure-mode emacs-lisp-mode) . aggressive-indent-mode)
  )
    #+END_SRC
** jumping around (ace jump)

   #+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :config
  (setq-default ace-jump-mode-scope 'frame) ; jumping only in current frame
  )
   #+END_SRC
** Rainbow
   Rainbow-mode is for previewing hex color strings in any buffer! :)
   #+BEGIN_SRC emacs-lisp
(use-package rainbow-mode)
   #+END_SRC

   Rainbow-delimiters are here to save the day for lisps! (and not only)
   Highlighting matching pairs with different colors
   #+BEGIN_SRC emacs-lisp
;; cause in the default colors there was some white cursors, not really apparent
'(((((((((())))))))))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  ;; (my-rainbow-custom-colors)
  (set-face-attribute 'rainbow-delimiters-depth-1-face nil
		      :foreground "#e91e63")
  (set-face-attribute 'rainbow-delimiters-depth-2-face nil
		      :foreground "#2196F3")
  (set-face-attribute 'rainbow-delimiters-depth-3-face nil
		      :foreground "#EF6C00")
  (set-face-attribute 'rainbow-delimiters-depth-4-face nil
		      :foreground "#B388FF")
  (set-face-attribute 'rainbow-delimiters-depth-5-face nil
		      :foreground "#76ff03")
  (set-face-attribute 'rainbow-delimiters-depth-6-face nil
		      :foreground "#26A69A")
  (set-face-attribute 'rainbow-delimiters-depth-7-face nil
		      :foreground "#FFCDD2")
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil
		      :foreground "#795548")
  (set-face-attribute 'rainbow-delimiters-depth-9-face nil
		      :foreground "#DCE775")
  )
   #+END_SRC

** LSP: Language Server Protocol
   #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :config
  (add-to-list 'lsp-language-id-configuration '(clojure-mode . "clojure-mode"))
  :init
  (setq lsp-enable-indentation nil))

(use-package lsp-ui
  :commands lsp-ui-mode)

(use-package company-lsp
  :commands company-lsp)

   #+END_SRC
** Linting
   Flycheck: checking only when saving (not when editing the file - can cause slowness)
   #+BEGIN_SRC emacs-lisp
(use-package flycheck
  
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  )
   #+END_SRC
** HEX colors
   an alternative to rainbow-mode? 
   #+BEGIN_SRC emacs-lisp :tangle no
   (load-file (relative-from-init "elisp/xah.el"))
   #+END_SRC
   And now you can call the =xah-syntax-color-hex= function in any buffer :)
   Found at http://ergoemacs.org/emacs/xah-css-mode.html
* (Ma)git
  #+BEGIN_SRC emacs-lisp
(use-package magit
  ;; show-all is meant for org-mode. ediff would show org-mode files folded
  :hook (ediff-prepare-buffer . show-all)
  :config
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  )
  #+END_SRC

  Ediff: great diff tool that can be used in magit :)
  Customizing colors cause in doom-molokai theme you could't notice anything
  #+BEGIN_SRC emacs-lisp
(use-package ediff
  :config
  ;; A head (last commit)
  (set-face-attribute 'ediff-current-diff-A nil
		      :background "#8b0000"
		      :foreground "#CCC")
  ;; B index (stage)
  (set-face-attribute 'ediff-current-diff-B nil
		      :background "#008b00"
		      :foreground "#CCC")
  ;; C working tree
  (set-face-attribute 'ediff-current-diff-C nil
		      :background "#8b5a00"
		      :foreground "#CCC")
  )
  #+END_SRC
* Languages
** Clojure
   #+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :bind(
	:map clojure-mode-map
	("C-<return>" . cider-eval-defun-at-point)
	("M-<return>" . cider-eval-last-sexp)
	)
  )
(use-package cider)
   #+END_SRC
*** Linting
    Note: have to install =clj-kondo= with =npm install -g clj-kondo=
    #+BEGIN_SRC emacs-lisp

(defun my-clj-kondo-hook ()
  (require 'flycheck-clj-kondo)
  (flycheck-mode))

(use-package flycheck-clj-kondo
  ;; TODO :hook flycheck-mode ??
  ;; not working?
  :hook (flycheck-mode-hoook . (lambda () (require 'flycheck-clj-kondo)))
  ;; :config
  ;; (dolist (hook '(clojure-mode-hook clojurec-mode-hook))
  ;;   (add-hook hook 'my-clj-kondo-hook))
  )
    #+END_SRC

** etc (yaml..)
   #+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
   #+END_SRC
  
* Web
** restclient
   Associating with =.http= files
   #+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.http\\'" . restclient-mode)
  )
   #+END_SRC

   Allowing restclient snippets in org-mode
   + [ ] how can i load this? 
   #+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :init ; init is ran before a package is loaded
  (with-eval-after-load 'org
    (require 'ob-restclient))
  :config
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((restclient . t))))
   #+END_SRC
* Key-chord
  #+BEGIN_SRC emacs-lisp
(defun key-chord-helm ()
  ;; helm: , (right hand middle finger)
  (key-chord-define-global ",r" 'helm-all-mark-rings) ;; Rings
  (key-chord-define-global ",m" 'helm-mini) ;; Mini
  (key-chord-define-global ",s" 'helm-swoop) ;; Swoop
  (key-chord-define-global ",t" 'helm-projectile-find-file) ;; projecTile
  (key-chord-define-global ",g" 'helm-projectile-ag) ;; aG
  )

(defun key-chord-ace-jump ()
  ;; ace: c (c for jump : left hand middle finger)
  (key-chord-define-global "cj" 'ace-jump-mode)
  ;; Jump Character
  (key-chord-define-global "ck" 'ace-jump-char-mode)
  ;; Jump Line
  (key-chord-define-global "cl" 'ace-jump-line-mode)
  )

(defun key-chord-windows-management ()
  ;; move between windows -WASD- like movement, except for the right hand
  ;; using ;
  (key-chord-define-global ";w" 'windmove-up)
  (key-chord-define-global ";a" 'windmove-left)
  (key-chord-define-global ";s" 'windmove-down)
  (key-chord-define-global ";d" 'windmove-right)

  ;; windows
  (key-chord-define-global ";q" 'delete-window) ;;q Quit
  (key-chord-define-global ";e" 'delete-other-windows)
  (key-chord-define-global ";f" (lambda () (interactive)(split-window-horizontally) (other-window 1))) ;; f home row
  (key-chord-define-global ";v" (lambda () (interactive)(split-window-vertically) (other-window 1))) ;; Vertical

  (key-chord-define-global ";r" 'windresize) ;; Resize
  )

(defun key-chord-editing ()
  ;; Expand Region (r for region)
  (key-chord-define-global "rj" 'er/expand-region)
  )

(use-package key-chord
  :demand t
  :config
  ;; disable in mini buffers
  (setq key-chord-two-keys-delay .05
	key-chord-one-key-delay .1)
  (defun disable-key-chord-mode ()
    (set (make-local-variable 'input-method-function) nil))

  (add-hook 'minibuffer-setup-hook #'disable-key-chord-mode)
  (key-chord-mode 1)

  (key-chord-helm)
  (key-chord-windows-management)
  (key-chord-editing)
  (key-chord-ace-jump)
  )
  #+END_SRC

* Presentation? (command-log)
  #+BEGIN_SRC emacs-lisp
(use-package command-log-mode
  :commands global-command-log-mode)
  #+END_SRC
  Usage:
  - global-command-log-mode
  - clm/open-command-log-buffer
* Windows
:PROPERTIES:
:header-args: :tangle (when (eq system-type 'windows-nt) "yes")
:END:

** lsp clojure fix
   #+BEGIN_SRC emacs-lisp
(setq lsp-clojure-server-command '("clojure-lsp.bat"))
   #+END_SRC

** paths: msys2
   Really useful for stuff like =ediff= etc..
   #+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (let (
        (mypaths
         '(
           "C:/msys64/mingw64/bin"
	   "C:/msys64/usr/local/bin"
	   "C:/msys64/usr/bin"
	   "C:/msys64/usr/bin"
	   "C:/msys64/usr/bin/site_perl"
	   "C:/msys64/usr/bin/vendor_perl"
	   "C:/msys64/usr/bin/core_perl"
           ) )
        )

    (setenv "PATH" (concat
                    (getenv "PATH")
		    ";"
		    (mapconcat 'identity mypaths ";")
		    ))

    ;;(setq exec-path (append mypaths (list "." exec-directory)) )
    (setq exec-path (append exec-path mypaths (list exec-directory)))
    ))

   #+END_SRC

** TODO COMMENT dired fix?
   Update: apparently it didn't work. it says that filed moved but.. nope!

   When renaming a file in dired (with =R=, I cannot move it in a directory that doesn't exist. See [[file:emacs-lisp/dired-fix.el]] . Fix found in a [[https://lists.gnu.org/archive/html/emacs-devel/2011-12/msg00253.html][GNU mail discussion]].
   Notes
   + =string-starts-with= doesn't exist
     replaced with =string-prefix-p=
   #+BEGIN_SRC emacs-lisp
(load-file (relative-from-init "elisp/dired-fix.el"))
   #+END_SRC

* COMMENT Troubleshooting etc
** checking executables
   #+BEGIN_SRC emacs-lisp
(message "do you see me?")
(executable-find "ag")
   #+END_SRC

** windows ag problem
   see https://github.com/bbatsov/helm-projectile/issues/90
   + choco uninstall ag
   + choco install ag --version 0.29.1.1641

* COMMENT notes
  #+BEGIN_SRC emacs-lisp
;; customize inital screen
(customize-group 'initialization)
  #+END_SRC
** cua mode

   #+BEGIN_SRC text
`cua--ena-cua-keys-keymap' Minor Mode Bindings:
key             binding
---             -------

C-c		Prefix Command
C-v		yank
C-x		Prefix Command
C-z		undo
ESC		Prefix Command

M-v		delete-selection-repeat-replace-region

C-c <timeout>	copy-region-as-kill

C-x <timeout>	kill-region   
   #+END_SRC
** org sh sessions example
   #+BEGIN_SRC sh :session *sh1*
echo hi
echo hi2
   #+END_SRC

   #+BEGIN_SRC sh :session *sh2*
echo "hi from sh2"
echo hi2
   #+END_SRC

   #+BEGIN_SRC sh
echo "hi from default"
   #+END_SRC
* TODO ideas to check
  + org mode : linking to certain line (can do already but, to point to the line where a function is declared?)
    https://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html
    
